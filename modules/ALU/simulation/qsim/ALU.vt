// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/02/2025 19:31:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_sample_tst(
	ops_alu,
	reg_a,
	reg_b,
	sampler_tx
);
input [3:0] ops_alu;
input [15:0] reg_a;
input [15:0] reg_b;
output sampler_tx;

reg sample;
time current_time;
always @(ops_alu or reg_a or reg_b)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALU_vlg_check_tst (
	flag,
	res,
	sampler_rx
);
input [2:0] flag;
input [15:0] res;
input sampler_rx;

reg [2:0] flag_expected;
reg [15:0] res_expected;

reg [2:0] flag_prev;
reg [15:0] res_prev;

reg [2:0] flag_expected_prev;
reg [15:0] res_expected_prev;

reg [2:0] last_flag_exp;
reg [15:0] last_res_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	flag_prev = flag;
	res_prev = res;
end

// update expected /o prevs

always @(trigger)
begin
	flag_expected_prev = flag_expected;
	res_expected_prev = res_expected;
end


// expected flag[ 2 ]
initial
begin
	flag_expected[2] = 1'bX;
end 
// expected flag[ 1 ]
initial
begin
	flag_expected[1] = 1'bX;
end 
// expected flag[ 0 ]
initial
begin
	flag_expected[0] = 1'bX;
end 
// expected res[ 15 ]
initial
begin
	res_expected[15] = 1'bX;
end 
// expected res[ 14 ]
initial
begin
	res_expected[14] = 1'bX;
end 
// expected res[ 13 ]
initial
begin
	res_expected[13] = 1'bX;
end 
// expected res[ 12 ]
initial
begin
	res_expected[12] = 1'bX;
end 
// expected res[ 11 ]
initial
begin
	res_expected[11] = 1'bX;
end 
// expected res[ 10 ]
initial
begin
	res_expected[10] = 1'bX;
end 
// expected res[ 9 ]
initial
begin
	res_expected[9] = 1'bX;
end 
// expected res[ 8 ]
initial
begin
	res_expected[8] = 1'bX;
end 
// expected res[ 7 ]
initial
begin
	res_expected[7] = 1'bX;
end 
// expected res[ 6 ]
initial
begin
	res_expected[6] = 1'bX;
end 
// expected res[ 5 ]
initial
begin
	res_expected[5] = 1'bX;
end 
// expected res[ 4 ]
initial
begin
	res_expected[4] = 1'bX;
end 
// expected res[ 3 ]
initial
begin
	res_expected[3] = 1'bX;
end 
// expected res[ 2 ]
initial
begin
	res_expected[2] = 1'bX;
end 
// expected res[ 1 ]
initial
begin
	res_expected[1] = 1'bX;
end 
// expected res[ 0 ]
initial
begin
	res_expected[0] = 1'bX;
end 
// generate trigger
always @(flag_expected or flag or res_expected or res)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected flag = %b | expected res = %b | ",flag_expected_prev,res_expected_prev);
	$display("| real flag = %b | real res = %b | ",flag_prev,res_prev);
`endif
	if (
		( flag_expected_prev[0] !== 1'bx ) && ( flag_prev[0] !== flag_expected_prev[0] )
		&& ((flag_expected_prev[0] !== last_flag_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flag[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flag_expected_prev);
		$display ("     Real value = %b", flag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_flag_exp[0] = flag_expected_prev[0];
	end
	if (
		( flag_expected_prev[1] !== 1'bx ) && ( flag_prev[1] !== flag_expected_prev[1] )
		&& ((flag_expected_prev[1] !== last_flag_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flag[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flag_expected_prev);
		$display ("     Real value = %b", flag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_flag_exp[1] = flag_expected_prev[1];
	end
	if (
		( flag_expected_prev[2] !== 1'bx ) && ( flag_prev[2] !== flag_expected_prev[2] )
		&& ((flag_expected_prev[2] !== last_flag_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flag[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flag_expected_prev);
		$display ("     Real value = %b", flag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_flag_exp[2] = flag_expected_prev[2];
	end
	if (
		( res_expected_prev[0] !== 1'bx ) && ( res_prev[0] !== res_expected_prev[0] )
		&& ((res_expected_prev[0] !== last_res_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[0] = res_expected_prev[0];
	end
	if (
		( res_expected_prev[1] !== 1'bx ) && ( res_prev[1] !== res_expected_prev[1] )
		&& ((res_expected_prev[1] !== last_res_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[1] = res_expected_prev[1];
	end
	if (
		( res_expected_prev[2] !== 1'bx ) && ( res_prev[2] !== res_expected_prev[2] )
		&& ((res_expected_prev[2] !== last_res_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[2] = res_expected_prev[2];
	end
	if (
		( res_expected_prev[3] !== 1'bx ) && ( res_prev[3] !== res_expected_prev[3] )
		&& ((res_expected_prev[3] !== last_res_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[3] = res_expected_prev[3];
	end
	if (
		( res_expected_prev[4] !== 1'bx ) && ( res_prev[4] !== res_expected_prev[4] )
		&& ((res_expected_prev[4] !== last_res_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[4] = res_expected_prev[4];
	end
	if (
		( res_expected_prev[5] !== 1'bx ) && ( res_prev[5] !== res_expected_prev[5] )
		&& ((res_expected_prev[5] !== last_res_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[5] = res_expected_prev[5];
	end
	if (
		( res_expected_prev[6] !== 1'bx ) && ( res_prev[6] !== res_expected_prev[6] )
		&& ((res_expected_prev[6] !== last_res_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[6] = res_expected_prev[6];
	end
	if (
		( res_expected_prev[7] !== 1'bx ) && ( res_prev[7] !== res_expected_prev[7] )
		&& ((res_expected_prev[7] !== last_res_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[7] = res_expected_prev[7];
	end
	if (
		( res_expected_prev[8] !== 1'bx ) && ( res_prev[8] !== res_expected_prev[8] )
		&& ((res_expected_prev[8] !== last_res_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[8] = res_expected_prev[8];
	end
	if (
		( res_expected_prev[9] !== 1'bx ) && ( res_prev[9] !== res_expected_prev[9] )
		&& ((res_expected_prev[9] !== last_res_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[9] = res_expected_prev[9];
	end
	if (
		( res_expected_prev[10] !== 1'bx ) && ( res_prev[10] !== res_expected_prev[10] )
		&& ((res_expected_prev[10] !== last_res_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[10] = res_expected_prev[10];
	end
	if (
		( res_expected_prev[11] !== 1'bx ) && ( res_prev[11] !== res_expected_prev[11] )
		&& ((res_expected_prev[11] !== last_res_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[11] = res_expected_prev[11];
	end
	if (
		( res_expected_prev[12] !== 1'bx ) && ( res_prev[12] !== res_expected_prev[12] )
		&& ((res_expected_prev[12] !== last_res_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[12] = res_expected_prev[12];
	end
	if (
		( res_expected_prev[13] !== 1'bx ) && ( res_prev[13] !== res_expected_prev[13] )
		&& ((res_expected_prev[13] !== last_res_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[13] = res_expected_prev[13];
	end
	if (
		( res_expected_prev[14] !== 1'bx ) && ( res_prev[14] !== res_expected_prev[14] )
		&& ((res_expected_prev[14] !== last_res_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[14] = res_expected_prev[14];
	end
	if (
		( res_expected_prev[15] !== 1'bx ) && ( res_prev[15] !== res_expected_prev[15] )
		&& ((res_expected_prev[15] !== last_res_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[15] = res_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] ops_alu;
reg [15:0] reg_a;
reg [15:0] reg_b;
// wires                                               
wire [2:0] flag;
wire [15:0] res;

wire sampler;                             

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.flag(flag),
	.ops_alu(ops_alu),
	.reg_a(reg_a),
	.reg_b(reg_b),
	.res(res)
);
// ops_alu[ 3 ]
initial
begin
	ops_alu[3] = 1'b1;
end 
// ops_alu[ 2 ]
initial
begin
	ops_alu[2] = 1'b0;
end 
// ops_alu[ 1 ]
initial
begin
	ops_alu[1] = 1'b0;
end 
// ops_alu[ 0 ]
initial
begin
	ops_alu[0] = 1'b0;
end 
// reg_a[ 15 ]
initial
begin
	reg_a[15] = 1'b0;
end 
// reg_a[ 14 ]
initial
begin
	reg_a[14] = 1'b1;
end 
// reg_a[ 13 ]
initial
begin
	reg_a[13] = 1'b0;
end 
// reg_a[ 12 ]
initial
begin
	reg_a[12] = 1'b0;
end 
// reg_a[ 11 ]
initial
begin
	reg_a[11] = 1'b1;
end 
// reg_a[ 10 ]
initial
begin
	reg_a[10] = 1'b0;
end 
// reg_a[ 9 ]
initial
begin
	reg_a[9] = 1'b0;
end 
// reg_a[ 8 ]
initial
begin
	reg_a[8] = 1'b0;
end 
// reg_a[ 7 ]
initial
begin
	reg_a[7] = 1'b1;
end 
// reg_a[ 6 ]
initial
begin
	reg_a[6] = 1'b0;
end 
// reg_a[ 5 ]
initial
begin
	reg_a[5] = 1'b1;
end 
// reg_a[ 4 ]
initial
begin
	reg_a[4] = 1'b1;
end 
// reg_a[ 3 ]
initial
begin
	reg_a[3] = 1'b1;
end 
// reg_a[ 2 ]
initial
begin
	reg_a[2] = 1'b0;
end 
// reg_a[ 1 ]
initial
begin
	reg_a[1] = 1'b1;
end 
// reg_a[ 0 ]
initial
begin
	reg_a[0] = 1'b0;
end 
// reg_b[ 15 ]
initial
begin
	reg_b[15] = 1'b0;
end 
// reg_b[ 14 ]
initial
begin
	reg_b[14] = 1'b0;
end 
// reg_b[ 13 ]
initial
begin
	reg_b[13] = 1'b0;
end 
// reg_b[ 12 ]
initial
begin
	reg_b[12] = 1'b1;
end 
// reg_b[ 11 ]
initial
begin
	reg_b[11] = 1'b0;
end 
// reg_b[ 10 ]
initial
begin
	reg_b[10] = 1'b0;
end 
// reg_b[ 9 ]
initial
begin
	reg_b[9] = 1'b0;
end 
// reg_b[ 8 ]
initial
begin
	reg_b[8] = 1'b1;
end 
// reg_b[ 7 ]
initial
begin
	reg_b[7] = 1'b0;
end 
// reg_b[ 6 ]
initial
begin
	reg_b[6] = 1'b0;
end 
// reg_b[ 5 ]
initial
begin
	reg_b[5] = 1'b0;
end 
// reg_b[ 4 ]
initial
begin
	reg_b[4] = 1'b0;
end 
// reg_b[ 3 ]
initial
begin
	reg_b[3] = 1'b0;
end 
// reg_b[ 2 ]
initial
begin
	reg_b[2] = 1'b0;
end 
// reg_b[ 1 ]
initial
begin
	reg_b[1] = 1'b1;
end 
// reg_b[ 0 ]
initial
begin
	reg_b[0] = 1'b0;
end 

ALU_vlg_sample_tst tb_sample (
	.ops_alu(ops_alu),
	.reg_a(reg_a),
	.reg_b(reg_b),
	.sampler_tx(sampler)
);

ALU_vlg_check_tst tb_out(
	.flag(flag),
	.res(res),
	.sampler_rx(sampler)
);
endmodule

